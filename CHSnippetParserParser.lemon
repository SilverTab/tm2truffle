%include {
#import <Foundation/Foundation.h>
#import "T2TSnippetConverterShared.h"

#ifndef CHAR_PAYLOAD_TO_STRING
#define CHAR_PAYLOAD_TO_STRING(p) ({ T2TSnippetToken tok = p; [[NSString alloc] initWithBytes:&(tok.payloadChar) length:1 encoding:NSUTF8StringEncoding]; })
#endif

#ifndef PAYLOAD_TO_STRING
#define PAYLOAD_TO_STRING(p) ({ T2TSnippetToken tok = p; [[NSString alloc] initWithBytes:tok.payloadStart length:tok.payloadEnd - tok.payloadStart encoding:NSUTF8StringEncoding]; })
#endif

#ifndef ESCAPE_SNIPPET_STRING
#define ESCAPE_SNIPPET_STRING(s) ({ \
	NSMutableString *newString = [s mutableCopy]; \
	[newString replaceOccurrencesOfString:@"\"" withString:@"\\\"" options:NSLiteralSearch range:NSMakeRange(0, [newString length])]; \
	[newString replaceOccurrencesOfString:@"\\" withString:@"\\\\" options:NSLiteralSearch range:NSMakeRange(0, [newString length])]; \
	newString; \
})
#endif

}


%name CHSnippet_Parse
%token_type {T2TSnippetToken}

%extra_argument {id output}

%syntax_error {
	printf("Syntax error\n");
}


%type main {NSString*}
main ::= superroot(x). {
    [output appendString:x]; }

%type superroot {NSString*}
superroot(r) ::= superroot(r2) superroot_inner(i). {
	r = [r2 stringByAppendingString:i]; }
superroot(r) ::= superroot_inner(i). {
	r = i; }
superroot(r) ::= . {
	r = @""; }

%type root {NSString*}
root(r) ::= root(r2) root_inner(i). {
	r = [r2 stringByAppendingString:i]; }
root(r) ::= root_inner(i). {
	r = i; }
root(r) ::= . {
	r = @""; }

%type superroot_inner {NSString*}
superroot_inner(i) ::= superverbatim(v). {
	i = v; }
superroot_inner(i) ::= root_inner_no_verbatim(t). {
	i = t; }
superroot_inner(i) ::= verbatim(v). {
	i = v; }

%type root_inner {NSString*}
root_inner(i) ::= root_inner_no_verbatim(t). {
	i = [@"%" stringByAppendingString:t]; }
root_inner(i) ::= verbatim(v). {
	i = v; }

%type root_inner_no_verbatim {NSString*}
root_inner_no_verbatim(i) ::= tabstop(t). {
	i = t; }
root_inner_no_verbatim(i) ::= variable(v). {
	i = v; }
root_inner_no_verbatim(i) ::= shell(s). {
	i = s; }

%type tabstop {NSString*}
tabstop(t) ::= DOLLAR NUMERIC(n). {
    t = [NSString stringWithFormat:@"{%@}", PAYLOAD_TO_STRING(n)]; }
tabstop(t) ::= DOLLAR_CURLY NUMERIC(n) misc(m) CURLY. {
    t = [NSString stringWithFormat:@"{%@%@}", PAYLOAD_TO_STRING(n), m]; }

%type variable {NSString*}
variable(v) ::= DOLLAR IDENTIFIER(n). {
    v = [NSString stringWithFormat:@"{%@}", PAYLOAD_TO_STRING(n)]; }
variable(v) ::= DOLLAR_CURLY IDENTIFIER(n) misc(m) CURLY. {
    v = [NSString stringWithFormat:@"{%@%@}", PAYLOAD_TO_STRING(n), m]; }

%type misc {NSString*}
misc(m) ::= COLON root(r). {
    m = [NSString stringWithFormat:@"=\"%@\"", ESCAPE_SNIPPET_STRING(r)]; }
misc(m) ::= REGEX(r). {
    m = PAYLOAD_TO_STRING(r); }
misc(m) ::= . {
    m = @""; }

%type shell {NSString*}
shell(s1) ::= SHELL(s2). {
    s1 = PAYLOAD_TO_STRING(s2); }

shell(s1) ::= DOLLAR_CURLY SHELL(s2) misc(m) CURLY. {
    s1 = [NSString stringWithFormat:@"{%@%@}", PAYLOAD_TO_STRING(s2), m]; }

%type superverbatim {NSString*}
superverbatim(v) ::= CURLY(c). {
    v = PAYLOAD_TO_STRING(c); }

%type verbatim {NSString*}
verbatim(v) ::= CHAR(c). {
    v = CHAR_PAYLOAD_TO_STRING(c); }
verbatim(v) ::= DOLLAR_CURLY. {
    v = @"${"; }
verbatim(v) ::= DOLLAR. {
    v = @"$"; }
verbatim(v) ::= COLON. {
    v = @":"; }
verbatim(v) ::= REGEX(r). {
    v = PAYLOAD_TO_STRING(r); }
verbatim(v) ::= IDENTIFIER(d). {
    v = PAYLOAD_TO_STRING(d); }
verbatim(v) ::= NUMERIC(n). {
    v = PAYLOAD_TO_STRING(n); }
